#
# デプロイ用のネットワーク定義ファイル(転移学習用)
# $CAFFE_ROOT/models/bvlc_reference_caffenet/deploy.prototxtを改変
# 
# 入力層および出力層以外はtrain_val.prototxtと同じ
#
# Input Layer: http://caffe.berkeleyvision.org/tutorial/layers/input.html
# Convolution Layer: http://caffe.berkeleyvision.org/tutorial/layers/convolution.html
# ReLU Layer: http://caffe.berkeleyvision.org/tutorial/layers/relu.html
# Pooling Layer: http://caffe.berkeleyvision.org/tutorial/layers/pooling.html
# Local Response Normalization (LRN) : http://caffe.berkeleyvision.org/tutorial/layers/lrn.html
# Inner Product Layer : http://caffe.berkeleyvision.org/tutorial/layers/innerproduct.html
# Dropout Layer : http://caffe.berkeleyvision.org/tutorial/layers/dropout.html
# Accuracy and Top-k : http://caffe.berkeleyvision.org/tutorial/layers/accuracy.html
# Softmax Layer : http://caffe.berkeleyvision.org/tutorial/layers/softmax.html
#

name: "CaffeNet_vJamit"	# レイヤー定義ファイルの名前
layer {
  name: "data"		# レイヤー名
  type: "Input"		# レイヤータイプ（入力）
  top: "data"
  # 入力ファイルの設定(dimは順に，バッチサイズ，チャンネル数，画像サイズ，画像サイズ)
  # 一枚しか評価しないためバッチサイズは1に設定
  input_param { shape: { dim: 1 dim: 3 dim: 227 dim: 227 } }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "data"
  top: "conv1"
  convolution_param {
    num_output: 96
    kernel_size: 11
    stride: 4
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "conv1"
  top: "conv1"
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 3
    stride: 2
  }
}
layer {
  name: "norm1"
  type: "LRN"
  bottom: "pool1"
  top: "norm1"
  lrn_param {
    local_size: 5
    alpha: 0.0001
    beta: 0.75
  }
}
layer {
  name: "conv2"
  type: "Convolution"
  bottom: "norm1"
  top: "conv2"
  convolution_param {
    num_output: 256
    pad: 2
    kernel_size: 5
    group: 2
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "conv2"
  top: "conv2"
}
layer {
  name: "pool2"
  type: "Pooling"
  bottom: "conv2"
  top: "pool2"
  pooling_param {
    pool: MAX
    kernel_size: 3
    stride: 2
  }
}
layer {
  name: "norm2"
  type: "LRN"
  bottom: "pool2"
  top: "norm2"
  lrn_param {
    local_size: 5
    alpha: 0.0001
    beta: 0.75
  }
}
layer {
  name: "conv3"
  type: "Convolution"
  bottom: "norm2"
  top: "conv3"
  convolution_param {
    num_output: 384
    pad: 1
    kernel_size: 3
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "conv3"
  top: "conv3"
}
layer {
  name: "conv4"
  type: "Convolution"
  bottom: "conv3"
  top: "conv4"
  convolution_param {
    num_output: 384
    pad: 1
    kernel_size: 3
    group: 2
  }
}
layer {
  name: "relu4"
  type: "ReLU"
  bottom: "conv4"
  top: "conv4"
}
layer {
  name: "conv5"
  type: "Convolution"
  bottom: "conv4"
  top: "conv5"
  convolution_param {
    num_output: 256
    pad: 1
    kernel_size: 3
    group: 2
  }
}
layer {
  name: "relu5"
  type: "ReLU"
  bottom: "conv5"
  top: "conv5"
}
layer {
  name: "pool5"
  type: "Pooling"
  bottom: "conv5"
  top: "pool5"
  pooling_param {
    pool: MAX
    kernel_size: 3
    stride: 2
  }
}
layer {
  name: "fc6"
  type: "InnerProduct"
  bottom: "pool5"
  top: "fc6"
  inner_product_param {
    num_output: 4096
  }
}
layer {
  name: "relu6"
  type: "ReLU"
  bottom: "fc6"
  top: "fc6"
}
layer {
  name: "drop6"
  type: "Dropout"
  bottom: "fc6"
  top: "fc6"
  dropout_param {
    dropout_ratio: 0.5
  }
}
layer {
  name: "fc7"
  type: "InnerProduct"
  bottom: "fc6"
  top: "fc7"
  inner_product_param {
    num_output: 4096
  }
}
layer {
  name: "relu7"
  type: "ReLU"
  bottom: "fc7"
  top: "fc7"
}
layer {
  name: "drop7"
  type: "Dropout"
  bottom: "fc7"
  top: "fc7"
  dropout_param {
    dropout_ratio: 0.5
  }
}
layer {
  name: "fc8tl"	# fc8ではreference modelと重複するため名前を変更
  type: "InnerProduct"
  bottom: "fc7"
  top: "fc8tl"
  inner_product_param {
    num_output: 2
  }
}
layer {
  name: "prob"
  type: "Softmax"
  bottom: "fc8tl"
  top: "prob"
}
